// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Finance.Data;

#nullable disable

namespace Finance.Data.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20230206140218_AddLoanStatusModLoanTransaction")]
    partial class AddLoanStatusModLoanTransaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CurrencyUserDetail", b =>
                {
                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("CurrencyId", "UserDetailId");

                    b.ToTable("CurrencyUserDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Finance.Data.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountId"), 1L, 1);

                    b.Property<decimal>("BankAccountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("BankAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("BankAccount", "dbo");
                });

            modelBuilder.Entity("Finance.Data.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"), 1L, 1);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency", "dbo");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CurrencyName = "USD",
                            IsPopular = true
                        },
                        new
                        {
                            CurrencyId = 2,
                            CurrencyName = "EUR",
                            IsPopular = true
                        },
                        new
                        {
                            CurrencyId = 3,
                            CurrencyName = "UAH",
                            IsPopular = true
                        },
                        new
                        {
                            CurrencyId = 4,
                            CurrencyName = "JPY",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 5,
                            CurrencyName = "GBP",
                            IsPopular = true
                        },
                        new
                        {
                            CurrencyId = 6,
                            CurrencyName = "CNY",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 7,
                            CurrencyName = "AUD",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 8,
                            CurrencyName = "CAD",
                            IsPopular = true
                        },
                        new
                        {
                            CurrencyId = 9,
                            CurrencyName = "CHF",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 10,
                            CurrencyName = "HKD",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 11,
                            CurrencyName = "SGD",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 12,
                            CurrencyName = "SEK",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 13,
                            CurrencyName = "KRW",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 14,
                            CurrencyName = "NOK",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 15,
                            CurrencyName = "NZD",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 16,
                            CurrencyName = "INR",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 17,
                            CurrencyName = "MXN",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 18,
                            CurrencyName = "TWD",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 19,
                            CurrencyName = "ZAR",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 20,
                            CurrencyName = "BRL",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 21,
                            CurrencyName = "DKK",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 22,
                            CurrencyName = "PLN",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 23,
                            CurrencyName = "THB",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 24,
                            CurrencyName = "ILS",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 25,
                            CurrencyName = "IDR",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 26,
                            CurrencyName = "CZK",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 27,
                            CurrencyName = "AED",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 28,
                            CurrencyName = "TRY",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 29,
                            CurrencyName = "HUF",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 30,
                            CurrencyName = "CLP",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 31,
                            CurrencyName = "SAR",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 32,
                            CurrencyName = "PHP",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 33,
                            CurrencyName = "MYR",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 34,
                            CurrencyName = "COP",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 35,
                            CurrencyName = "RUB",
                            IsPopular = false
                        },
                        new
                        {
                            CurrencyId = 36,
                            CurrencyName = "RON",
                            IsPopular = false
                        });
                });

            modelBuilder.Entity("Finance.Data.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ContactDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoanStatusId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Loan", "dbo");
                });

            modelBuilder.Entity("Finance.Data.Models.LoanStatus", b =>
                {
                    b.Property<int>("LoanStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoanStatusId");

                    b.ToTable("LoanStatus", "dbo");

                    b.HasData(
                        new
                        {
                            LoanStatusId = 1,
                            Name = "Requested"
                        },
                        new
                        {
                            LoanStatusId = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            LoanStatusId = 3,
                            Name = "Rejected"
                        },
                        new
                        {
                            LoanStatusId = 4,
                            Name = "Private"
                        });
                });

            modelBuilder.Entity("Finance.Data.Models.SupportRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RequestQuestion")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("UserDetailId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("SupportRequest");
                });

            modelBuilder.Entity("Finance.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuoteOnStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("LoanId");

                    b.ToTable("Transaction", "dbo");
                });

            modelBuilder.Entity("Finance.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Finance.Data.Models.UserDetail", b =>
                {
                    b.Property<int>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDetailId"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(10000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsLoggedBySocialNetwork")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("WelcomePageIsVisited")
                        .HasColumnType("bit");

                    b.HasKey("UserDetailId");

                    b.ToTable("UserDetail", "dbo");
                });

            modelBuilder.Entity("UserCurrency", b =>
                {
                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("UserDetailId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("UserCurrency", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Finance.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Finance.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finance.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Finance.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Data.Models.BankAccount", b =>
                {
                    b.HasOne("Finance.Data.Models.Currency", "Currency")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccount_Currency");

                    b.HasOne("Finance.Data.Models.UserDetail", "UserDetail")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccount_UserDetail");

                    b.Navigation("Currency");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("Finance.Data.Models.Loan", b =>
                {
                    b.HasOne("Finance.Data.Models.UserDetail", "ContactDetail")
                        .WithMany("LoanContactDetails")
                        .HasForeignKey("ContactDetailId")
                        .HasConstraintName("FK_Loan_ContactDetail");

                    b.HasOne("Finance.Data.Models.Currency", "Currency")
                        .WithMany("Loans")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Loan_Currency");

                    b.HasOne("Finance.Data.Models.LoanStatus", "LoanStatus")
                        .WithMany("Loans")
                        .HasForeignKey("LoanStatusId")
                        .HasConstraintName("FK_Loan_LoanStatus");

                    b.HasOne("Finance.Data.Models.UserDetail", "UserDetail")
                        .WithMany("LoanUserDetails")
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_Loan_UserDetail");

                    b.Navigation("ContactDetail");

                    b.Navigation("Currency");

                    b.Navigation("LoanStatus");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("Finance.Data.Models.SupportRequest", b =>
                {
                    b.HasOne("Finance.Data.Models.UserDetail", "UserDetail")
                        .WithMany("SupportRequests")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SupportRequest_UserDetail");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("Finance.Data.Models.Transaction", b =>
                {
                    b.HasOne("Finance.Data.Models.BankAccount", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_Transactions_BankAccount");

                    b.HasOne("Finance.Data.Models.Loan", "Loan")
                        .WithMany("Transactions")
                        .HasForeignKey("LoanId")
                        .HasConstraintName("FK_Transactions_Loan");

                    b.Navigation("BankAccount");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("UserCurrency", b =>
                {
                    b.HasOne("Finance.Data.Models.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCurrency_Currency");

                    b.HasOne("Finance.Data.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCurrency_UserDetail");
                });

            modelBuilder.Entity("Finance.Data.Models.BankAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Finance.Data.Models.Currency", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Finance.Data.Models.Loan", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Finance.Data.Models.LoanStatus", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Finance.Data.Models.UserDetail", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("LoanContactDetails");

                    b.Navigation("LoanUserDetails");

                    b.Navigation("SupportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
